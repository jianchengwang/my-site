__NUXT_JSONP__("/tech/git", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf){aw.id=aa;aw.depth=s;aw.text=aa;aw.level=t;aw.children=[];aw.no="1.1";ax.id=ab;ax.depth=s;ax.text=ab;ax.level=t;ax.children=[];ax.no="1.2";ay.id=ac;ay.depth=s;ay.text=ac;ay.level=t;ay.children=[];ay.no="1.3";az.id=aA;az.depth=s;az.text=aB;az.level=t;az.children=[];az.no="2.1";aC.id=aD;aC.depth=s;aC.text=aE;aC.level=t;aC.children=[];aC.no="2.2";aF.id=aG;aF.depth=s;aF.text=aH;aF.level=t;aF.children=[];aF.no="2.3";aI.id=aJ;aI.depth=s;aI.text=aK;aI.level=t;aI.children=[];aI.no="2.4";aL.id=aM;aL.depth=s;aL.text=ak;aL.level=t;aL.children=[];aL.no="2.5";aN.id=aO;aN.depth=s;aN.text=aP;aN.level=t;aN.children=[];aN.no="2.6";aQ.id=aR;aQ.depth=s;aQ.text=aS;aQ.level=t;aQ.children=[];aQ.no="2.7";aT.id=aU;aT.depth=s;aT.text=aV;aT.level=t;aT.children=[];aT.no="2.8";aW.id=aX;aW.depth=s;aW.text=al;aW.level=t;aW.children=[];aW.no="2.9";aY.id=aZ;aY.depth=s;aY.text=a_;aY.level=t;aY.children=[];aY.no="2.10";a$.id=ba;a$.depth=s;a$.text=bb;a$.level=t;a$.children=[];a$.no="2.11";bc.id=bd;bc.depth=s;bc.text=be;bc.level=t;bc.children=[];bc.no="2.12";bf.id=bg;bf.depth=s;bf.text=bh;bf.level=t;bf.children=[];bf.no="2.13";bi.id=bj;bi.depth=s;bi.text=bk;bi.level=t;bi.children=[];bi.no="2.14";bl.id=bm;bl.depth=s;bl.text=am;bl.level=t;bl.children=[];bl.no="2.15";bn.id=bo;bn.depth=s;bn.text=bp;bn.level=t;bn.children=[];bn.no="2.16";bq.id=br;bq.depth=s;bq.text=bs;bq.level=t;bq.children=[];bq.no="2.17";bt.id=bu;bt.depth=s;bt.text=bv;bt.level=t;bt.children=[];bt.no="2.18";bw.id=bx;bw.depth=s;bw.text=by;bw.level=t;bw.children=[];bw.no="2.19";return {data:[{doc:{slug:g,description:"[Git][https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FGit] 是一个分布式的管理系统，作者 Linus Torvalds  2005 创建它，主要是维护linux内核，现在很多人用它作为大型项目的版本控制软件，来管理源代码，或是一些纯文本的笔记或者文档。本篇文字，很多的文本描述，或者图片资源来自互联网，我只是互联网的搬运工，本文仅作为个人学习的一个记录跟总结。我将在最下方列出部分链接，感兴趣的朋友可以去看看。",title:g,createdAt:"2020-10-09T00:00:00.000Z",categories:["linux",av],tags:[g],toc:[{id:$,depth:R,text:$,level:S,no:S,children:[aw,ax,ay]},aw,ax,ay,{id:ad,depth:R,text:ad,level:S,no:t,children:[az,aC,aF,aI,aL,aN,aQ,aT,aW,aY,a$,bc,bf,bi,bl,bn,bq,bt,bw]},az,aC,aF,aI,aL,aN,aQ,aT,aW,aY,a$,bc,bf,bi,bl,bn,bq,bt,bw,{id:bz,depth:R,text:bA,level:S,no:R,children:[]},{id:ae,depth:R,text:bB,level:S,no:s,children:[]},{id:af,depth:R,text:af,level:S,no:5,children:[]}],body:{type:bC,children:[{type:b,tag:h,props:{},children:[{type:a,value:N},{type:b,tag:m,props:{},children:[{type:a,value:bD}]},{type:a,value:bE},{type:b,tag:j,props:{href:bF,rel:[B,C,D],target:E},children:[{type:a,value:bG}]},{type:a,value:bH}]},{type:a,value:e},{type:a,value:e},{type:b,tag:Y,props:{id:$},children:[{type:b,tag:j,props:{href:"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:$}]},{type:a,value:e},{type:b,tag:u,props:{id:aa},children:[{type:b,tag:j,props:{href:"#%E7%89%B9%E7%82%B9",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aa}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Git 有如下几个特点："}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"1."},{type:b,tag:m,props:{},children:[{type:a,value:"直接记录快照，而非差异比较"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"2."},{type:b,tag:m,props:{},children:[{type:a,value:"近乎所有操作都是本地执行"}]},{type:a,value:"，所以速度很快"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"3.时刻保持"},{type:b,tag:m,props:{},children:[{type:a,value:"数据的完整性"}]},{type:a,value:"，在保存到 Git 之前，所有数据都要进行内容的校验和（checksum）计算，并将此结果作为数据的唯一标识和索引。换句话说，不可能在你修改了文件或目录之后，Git 一无所知。这项特性作为 Git 的设计哲学，建在整体架构的最底层。所以如果文件在传输时变得不完整，或者磁盘损坏导致文件数据缺失，Git 都能立即察觉。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Git 使用 "},{type:b,tag:m,props:{},children:[{type:a,value:"SHA-1"}]},{type:a,value:" 算法计算数据的校验和，通过对文件的内容或目录的结构计算出一个 SHA-1 哈希值，作为指纹字符串。该字串由 40 个十六进制字符（0-9 及 a-f）组成，看起来就像是："}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,"language-text"]},children:[{type:b,tag:k,props:{},children:[{type:a,value:"24b9da6552252987aa493b52f8696cd6d3b00373\n"}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Git 的工作完全依赖于这类指纹字串，所以你会经常看到这样的哈希值。实际上，所有保存在 Git 数据库中的东西都是用此哈希值来作索引的，而不是靠文件名。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"4."},{type:b,tag:m,props:{},children:[{type:a,value:"多数操作仅添加数据"}]},{type:a,value:"，不用担心数据丢失"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"5."},{type:b,tag:m,props:{},children:[{type:a,value:"文件的三种状态"}]},{type:a,value:"，对于任何一个文件，在 Git 内都只有三种状态：已提交（"},{type:b,tag:m,props:{},children:[{type:a,value:"committed"}]},{type:a,value:"），已修改（"},{type:b,tag:m,props:{},children:[{type:a,value:"modified"}]},{type:a,value:"）和已暂存（"},{type:b,tag:m,props:{},children:[{type:a,value:bI}]},{type:a,value:"）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"由此我们看到 Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:ag,props:{alt:"工作目录，暂存区域，以及本地仓库",src:"https:\u002F\u002Fgit-scm.com\u002Ffigures\u002F18333fig0106-tn.png"},children:[]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"每个项目都有一个 Git 目录（如果 "},{type:b,tag:k,props:{},children:[{type:a,value:al}]},{type:a,value:" 出来的话，就是其中 "},{type:b,tag:k,props:{},children:[{type:a,value:".git"}]},{type:a,value:" 的目录；如果 "},{type:b,tag:k,props:{},children:[{type:a,value:"git clone --bare"}]},{type:a,value:" 的话，新建的目录本身就是 Git 目录。），它是 Git 用来保存元数据和对象数据库的地方。该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来的，接下来就可以在工作目录中对这些文件进行编辑。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"所谓的暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。"}]},{type:a,value:e},{type:b,tag:u,props:{id:ab},children:[{type:b,tag:j,props:{href:"#%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ab}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"基本的 Git 工作流程如下："}]},{type:a,value:e},{type:b,tag:"ol",props:{},children:[{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"在工作目录中修改某些文件。"}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"对修改后的文件进行快照，然后保存到暂存区域。"}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"所以，我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。"}]},{type:a,value:e},{type:b,tag:u,props:{id:ac},children:[{type:b,tag:j,props:{href:"#%E6%8A%80%E6%9C%AF%E8%AF%B4%E6%98%8E",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ac}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"文件内容并没有真正存储在索引("},{type:b,tag:Z,props:{},children:[{type:a,value:".git\u002Findex"}]},{type:a,value:")或者提交对象中，而是以blob的形式分别存储在数据库中("},{type:b,tag:Z,props:{},children:[{type:a,value:".git\u002Fobjects"}]},{type:a,value:")，并用SHA-1值来校验。 索引文件用识别码列出相关的blob文件以及别的数据。对于提交来说，以树("},{type:b,tag:Z,props:{},children:[{type:a,value:"tree"}]},{type:a,value:")的形式存储，同样用对于的哈希值识别。树对应着工作目录中的文件夹，树中包含的 树或者blob对象对应着相应的子目录和文件。每次提交都存储下它的上一级树的识别码。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"如果用detached HEAD提交，那么最后一次提交会被the reflog for HEAD引用。但是过一段时间就失效，最终被回收，与"},{type:b,tag:k,props:{},children:[{type:a,value:"git commit --amend"}]},{type:a,value:"或者"},{type:b,tag:k,props:{},children:[{type:a,value:"git rebase"}]},{type:a,value:"很像。"}]},{type:a,value:e},{type:b,tag:Y,props:{id:ad},children:[{type:b,tag:j,props:{href:"#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ad}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Git 命令是一些命令行工具的集合，它可以用来跟踪，记录文件的变动。比如你可以进行保存，比对，分析，合并等等，这个过程被称之为版本控制。"}]},{type:a,value:e},{type:b,tag:u,props:{id:aA},children:[{type:b,tag:j,props:{href:"#git-config",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aB}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"git的基本配置，配置文件在用户目录下的**.gitconfig**"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:bJ}]},{type:a,value:" 设置当前系统的git用户的名称跟邮件"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:bK}]},{type:a,value:" 设置一些别名，简化命令，提高效率，当然本文档为了介绍git的命令的使用，在下文的shell中都没有使用别名。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:bL}]},{type:a,value:" 跟 "},{type:b,tag:m,props:{},children:[{type:a,value:bM}]},{type:a,value:" 设置shadowsocks的http代理，避免有的仓库被GWF墙，拉取不了。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" config --global user.name "},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"jianchengwang\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" config --global user.email "},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"jiancheng_wang@yahoo.com\""}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bN},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" config --global --unset http.proxy\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" config --global --unset https.proxy\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"vim"}]},{type:a,value:" ~\u002F.gitconfig\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ah}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:N}]},{type:a,value:bJ},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:_}]},{type:a,value:"\n    name "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" jianchengwang\n    email "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" jiancheng_wang@yahoo.com\n\n"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:N}]},{type:a,value:bK},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:_}]},{type:a,value:"\n    co "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" checkout\n    br "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" branch\n    ci "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" commit\n    st "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" status\n    unstage "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" reset HEAD --\n    dog "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" log --all --decorate --oneline --graph\n\n"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:N}]},{type:a,value:bL},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:_}]},{type:a,value:"\n    proxy "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" socks5:\u002F\u002F127.0.0.1:1080\n\n"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:N}]},{type:a,value:bM},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:_}]},{type:a,value:"\n    proxt "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:" socks5:\u002F\u002F127.0.0.1:1080\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aD},children:[{type:b,tag:j,props:{href:"#git-init",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aE}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"Initialized empty Git repository， 在目录下为出现一个**.git**目录文件夹，是为你的项目存储所有历史和元信息的目录 - 包括所有的对象(commits,trees,blobs,tags)，这些对象指向不同的分支。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"mkdir"}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,T,U]},children:[{type:a,value:an}]},{type:a,value:bO},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bP}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aG},children:[{type:b,tag:j,props:{href:"#git-status",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aH}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"可以看到当前目录的git状态，比如所处分支，提交记录，未追踪的文件等，还有一个很好的命令提示作用，提示你可以使用哪些命令进行操作。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ah}]},{type:a,value:"\nn branch master\n\nNo commits yet\n\nUntracked files:\n  "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"git add \u003Cfile\u003E...\""}]},{type:a,value:" to include "},{type:b,tag:c,props:{className:[d,bR]},children:[{type:a,value:"in"}]},{type:a,value:" what will be committed"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:"\n\n    README.md\n\nnothing added to commit but untracked files present "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"git add\""}]},{type:a,value:" to track"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aJ},children:[{type:b,tag:j,props:{href:"#git-add",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aK}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"未追踪的文件，我们通过这个命令告诉git将这个文件进行版本控制，添加到暂存区 "},{type:b,tag:m,props:{},children:[{type:a,value:bI}]},{type:a,value:"，暂存区的记录在**.git\u002Findex**"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:" README.md\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bQ},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ah}]},{type:a,value:"\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:ao},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"git rm --cached \u003Cfile\u003E...\""}]},{type:a,value:" to unstage"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:"\n\n    new file:   README.md\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"rm"}]},{type:a,value:" --cached README.md\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:" -A\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aM},children:[{type:b,tag:j,props:{href:"#git-mv",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:ak}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"移动或者重命名文件，目录，或符号链接，类比"},{type:b,tag:k,props:{},children:[{type:a,value:"linux mv"}]}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:bS}]},{type:a,value:" a.txt "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"dir"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"如果是"},{type:b,tag:k,props:{},children:[{type:a,value:"window，mac"}]},{type:a,value:"系统对大小写不敏感，一般"},{type:b,tag:k,props:{},children:[{type:a,value:"git config ignorecase true"}]},{type:a,value:"，这时候也可以用"},{type:b,tag:k,props:{},children:[{type:a,value:ak}]},{type:a,value:"修正文件大小写问题，"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:bS}]},{type:a,value:" -f a.js A.js\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aO},children:[{type:b,tag:j,props:{href:"#git-commit",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aP}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"通过以下命令将暂存区的内容提交到本地仓库，会生成一个版本快照。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"add README.md\""}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:ah}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:N}]},{type:a,value:"master "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"root-commit"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:" 65f838e"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:_}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:" README.md\n "},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"1"}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"file"}]},{type:a,value:" changed, "},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:aq}]},{type:a,value:" insertions"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"+"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:", "},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:aq}]},{type:a,value:" deletions"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"-"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:"\n create mode "},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"100644"}]},{type:a,value:bT}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aR},children:[{type:b,tag:j,props:{href:"#git-remote",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aS}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"如果我们需要跟别人进行协作开发，就要把本地的代码推送到远程的服务器的仓库上，比如这里我在github上创建一个远程仓库，然后将本地仓库添加一个远程仓库地址，名字命名为"},{type:b,tag:m,props:{},children:[{type:a,value:"origin"}]},{type:a,value:" 一般，这个名字是约定俗称的，不建议去修改，但是假如你有多个远程仓库，可以自定义命名。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 添加远程仓库"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bU},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:" origin https:\u002F\u002Fgithub.com\u002Fjianchengwang\u002Fgit-tutorial.git\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 查看远程仓库"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" remote -v\norigin  https:\u002F\u002Fgithub.com\u002Fjianchengwang\u002Fgit-tutorial.git "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"fetch"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:"\norigin  https:\u002F\u002Fgithub.com\u002Fjianchengwang\u002Fgit-tutorial.git "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"push"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" remote -help\n\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aU},children:[{type:b,tag:j,props:{href:"#git-push",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:aV}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"我们可以将本地仓库当前分支的代码推送到远程仓库的分支上，"},{type:b,tag:m,props:{},children:[{type:a,value:"-u"}]},{type:a,value:" 表示set upstream for git pull\u002Fstatus 即设置当前远程分支为默认上游仓库，下次直接使用git push即可"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 格式"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:"远程仓库名"},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:bV},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:bW},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:bX},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push -u origin master\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin master:master\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin :master\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin --delete master\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果当前分支只有一个追踪分支，那么主机名都可以省略。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 推送本地所有分支到远程仓库"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push --all origin\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push --force origin\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# git push不会推送标签(tag)，除非使用–tags选项。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin --tags\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aX},children:[{type:b,tag:j,props:{href:"#git-clone",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:al}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"克隆远程仓库到本地文件夹git-demo，然后进行一些简单的修改，然后推送到远程仓库，现在我们有两个本地仓库了，其中git-demo的代码已经发生改变，并且推送到远程仓库，远程仓库的代码也发生改变，但是之前的本地的git-tutorial代码还是旧的，这时候我们切换到之前的git-tutorial文件目录，拉取远程仓库的代码。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" clone https:\u002F\u002Fgithub.com\u002Fjianchengwang\u002Fgit-tutorial.git git-demo\n"},{type:b,tag:c,props:{className:[d,T,U]},children:[{type:a,value:an}]},{type:a,value:" git-demo\n"},{type:b,tag:c,props:{className:[d,T,U]},children:[{type:a,value:"echo"}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"hello git\""}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:bT},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:" README.md \n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"'modify README.md'"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bY}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:aZ},children:[{type:b,tag:j,props:{href:"#git-fetch--pull",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:a_}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"取回远程主机某个分支的更新，再与本地的指定分支合并"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" pull "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:"远程仓库"},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:bX},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:bW},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:bV},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" pull origin master:master\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果远程分支与当前分支进行合并，则冒号后面的本地分支可以省略"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" pull origin master\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 等同于"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" fetch origin\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" merge origin\u002Fmaster\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果当前分支与远程分支存在追踪关系"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" branch --set-upstream master origin\u002Fmaster\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" pull origin\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果当前分支只有一个追踪分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" pull\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:ba},children:[{type:b,tag:j,props:{href:"#git-branch",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bb}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"在实现一些新功能或者修复 BUG 的时候，我们希望所有的修改环境都是独立的，Git 给我们提供了分支，它可以保证稳定版本的代码不会被破坏、不同的功能可以由不同开发者同时开发、开发者可以专注于自己的分支，不用担心被其他人破坏了环境。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"HEAD"}]},{type:a,value:" -\u003E 当前分支的最后一次更新，通常默认是指向master的最后一次提交。我们可以移动这个指针或者叫坐标，就可以变更使用的分支。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"提交时使用~(tilde)和^(caret)就可以指定某个提交的相对位置。最常用的就是相对于HEAD的位置。HEAD后面加上~(tilde）可以指定HEAD之前的提交记录。合并分支会有多个根节点，您可以用^(caret) 来指定使用哪个为根节点。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:ag,props:{alt:"用tilde和caret指定提交的相对位置",src:"https:\u002F\u002Fbacklog.com\u002Fgit-tutorial\u002Fcn\u002Fimg\u002Fpost\u002Fstepup\u002Fcapture_stepup1_3_2.png"},children:[]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"STASH"}]},{type:a,value:" -\u003E 还未提交的修改内容以及新添加的文件，留在索引区域或工作树的情况下切换到其他的分支时，修改内容会从原来的分支移动到目标分支。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"但是如果在checkout的目标分支中相同的文件也有修改，checkout会失败的。这时要么先提交修改内容，要么用stash暂时保存修改内容后再checkout。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"stash是临时保存文件修改内容的区域。stash可以暂时保存工作树和索引里还没提交的修改内容，您可以事后再取出暂存的修改，应用到原先的分支或其他的分支上。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:ag,props:{alt:"stash",src:"https:\u002F\u002Fbacklog.com\u002Fgit-tutorial\u002Fcn\u002Fimg\u002Fpost\u002Fstepup\u002Fcapture_stepup1_3_3.png"},children:[]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"我们在所在分支创建一个分支的时候，新建的分支会拥有当前分支的一份拷贝。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 创建分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" branch feature1\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 切换分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" checkout feature1\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 创建并切换"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" checkout -b feature2\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# checkout 后面跟文件名，会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" checkout -- "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:"filename"},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 查看当前分支，q键退出"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" branch\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 查看远程分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" branch -r\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 删除分支，如果当前分支处于feature2则不允许删除"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" branch -d feature2\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 如果我们分支有进行版本的改变，跟master分支不一致，那么我么将分支的内容merge到master分支上，或是直接使用-D 进行强制删除"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" branch -D feature2\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 推送分支到远程仓库并创建一个跟本地分支同名的分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin feature1\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 推送分支到远程仓库并创建一个名为f1的分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin feature1:f1\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 删除远程仓库的分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push origin :feature1\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:bd},children:[{type:b,tag:j,props:{href:"#git-tag",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:be}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 "},{type:b,tag:Z,props:{},children:[{type:a,value:"1.0.0"}]},{type:a,value:" 的标签"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" tag "},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"1.0"}]},{type:a,value:".0 1b2e1d63ff\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:bg},children:[{type:b,tag:j,props:{href:"#git-log",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bh}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"通过日志，我们可以很方便的查看并且追溯各个版本快照，并且stackoverflow有人展示了很多漂亮的日志格式，我们可以借鉴下"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:bZ,rel:[B,C,D],target:E},children:[{type:a,value:bZ}]}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" log\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 只看某人的提交日志"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" log --author"},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:H}]},{type:a,value:"bob\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 一行显示"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" log --online\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 显示前10条"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" log --oneline -10\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 显示某一次日志详情"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" show a2f5b8c\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 因为命令很长，所以我们可以在.gitconfig里设置别名"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" log --all --decorate --oneline --graph\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" dog\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:bj},children:[{type:b,tag:j,props:{href:"#git-merge--rebase",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bk}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"在做一些新特性或者修复 bug 的时候，我们通常会建立一个新的分支，而完成后我们需要做一个合并分支的操作。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"合并分支默认使用fast-forward("},{type:b,tag:m,props:{},children:[{type:a,value:"--ff"}]},{type:a,value:")模式，这种模式不会产生一个新的commit提交，如果你要使用**--no-ff**，如果是与他人协作开发，建议采用这种模式，因为它会原有的开发分支整个提交链的完整性。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"使用"},{type:b,tag:m,props:{},children:[{type:a,value:b_}]},{type:a,value:" 会重写项目历史，能让我们的项目提交日志保持一条竖线，但是这破坏协作的工作流，所以有一条黄金法则，"},{type:b,tag:m,props:{},children:[{type:a,value:"绝对不要在公共分支上使用rebase"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"merge"}]},{type:a,value:" 是合并操作，它会将两个分支的操作合并在一起，它关注点在真实的提交历史记录上"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:b_}]},{type:a,value:" 没有合并操作，它只是将当前分支的修改复制到目标分支的最后一次提交上面，它的关注点在开发的过程上面"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"如果两个分支同时对一个文件进行修改，并且commit，那么合并的时候会产生"},{type:b,tag:m,props:{},children:[{type:a,value:"conflict"}]},{type:a,value:" ，我们要解决冲突后才能进行合并操作。解决冲突一般会使用一些可视化的工具进行解决，命令行的话即使是使用vimdiff感觉也比较麻烦。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# merge"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" checkout master\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" merge feature1 \n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" merge feature1 --no-ff\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 将分支issue1的所有提交合并成一个提交并导入到master分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" merge --squash issue1\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# rebase"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" rebase feature1\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# conflict"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:bm},children:[{type:b,tag:j,props:{href:"#git-cherry-pick",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:am}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:am}]},{type:a,value:" 可以选择某一个分支中的一个或几个commit(s)来进行操作。例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了,其实也就是对已经存在的commit 进行再次提交."}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"命令集合:"}]},{type:a,value:e},{type:b,tag:b$,props:{},children:[{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:ar},{type:b,tag:ca,props:{id:cb},children:[{type:a,value:":单独合并一个提交"}]}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"git cherry-pick  -x "},{type:b,tag:ca,props:{id:cb},children:[{type:a,value:"：同上，不同点：保留原提交者信息。\n"},{type:b,tag:m,props:{},children:[{type:a,value:"Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit。"}]}]}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:ar},{type:b,tag:V,props:{},children:[{type:a,value:".."},{type:b,tag:W,props:{},children:[]}]}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:ar},{type:b,tag:V,props:{},children:[{type:a,value:"^.."},{type:b,tag:W,props:{},children:[]}]}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"前者表示把"},{type:b,tag:V,props:{},children:[{type:a,value:as},{type:b,tag:W,props:{},children:[{type:a,value:"之间(左开右闭，不包含start-commit-id)的提交cherry-pick到当前分支；\n后者有\"^\"标志的表示把"},{type:b,tag:V,props:{},children:[{type:a,value:as},{type:b,tag:W,props:{},children:[{type:a,value:"之间(闭区间，包含start-commit-id)的提交cherry-pick到当前分支。\n其中，"},{type:b,tag:V,props:{},children:[{type:a,value:as},{type:b,tag:W,props:{},children:[{type:a,value:"只需要commit-id的前6位即可，并且"},{type:b,tag:V,props:{},children:[{type:a,value:"在时间上必须早于"},{type:b,tag:W,props:{},children:[{type:a,value:"\n注：以上合并，需要手动push代码。"}]}]}]}]}]}]}]}]}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 从其他分支复制指定的提交，然后导入到现在的分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" cherry-pick 99daed2\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" cherry-pick "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:M}]},{type:a,value:"commit id"},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:L}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" cherry-pick --continue\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" cherry-pick --quit\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" cherry-pick --abo\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:bo},children:[{type:b,tag:j,props:{href:"#git-reset--revert",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bp}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"时光不能倒流，但是 Git 可以做时光机让你的提交记录回到过去。git revert 撤销某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销作为一次最新的提交。git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。相比 git reset，它不会改变现在的提交历史。因此，git revert 可以用在公共分支上，git reset 应该用在私有分支上。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"在reset可以遗弃不再使用的提交。执行遗弃时，需要根据影响的范围而指定不同的模式，可以指定是否复原索引或工作树的内容。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:ag,props:{alt:"遗弃提交",src:"https:\u002F\u002Fbacklog.com\u002Fgit-tutorial\u002Fcn\u002Fimg\u002Fpost\u002Fstepup\u002Fcapture_stepup6_3_1.png"},children:[]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"除了默认的mixed模式，还有soft和hard模式。欲了解受各模式影响的部分，请参照下面的表格。"}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:ai,props:{},children:[{type:b,tag:aj,props:{},children:[{type:a,value:"模式名称"}]},{type:b,tag:aj,props:{},children:[{type:a,value:"HEAD的位置"}]},{type:b,tag:aj,props:{},children:[{type:a,value:"索引"}]},{type:b,tag:aj,props:{},children:[{type:a,value:"工作树"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:ai,props:{},children:[{type:b,tag:F,props:{},children:[{type:a,value:av}]},{type:b,tag:F,props:{},children:[{type:a,value:X}]},{type:b,tag:F,props:{},children:[{type:a,value:at}]},{type:b,tag:F,props:{},children:[{type:a,value:at}]}]},{type:b,tag:ai,props:{},children:[{type:b,tag:F,props:{},children:[{type:a,value:"mixed"}]},{type:b,tag:F,props:{},children:[{type:a,value:X}]},{type:b,tag:F,props:{},children:[{type:a,value:X}]},{type:b,tag:F,props:{},children:[{type:a,value:at}]}]},{type:b,tag:ai,props:{},children:[{type:b,tag:F,props:{},children:[{type:a,value:"hard"}]},{type:b,tag:F,props:{},children:[{type:a,value:X}]},{type:b,tag:F,props:{},children:[{type:a,value:X}]},{type:b,tag:F,props:{},children:[{type:a,value:X}]}]}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"主要使用的场合："}]}]},{type:a,value:e},{type:b,tag:b$,props:{},children:[{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"复原修改过的索引的状态(mixed)"}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"彻底取消最近的提交(hard)"}]},{type:a,value:e},{type:b,tag:J,props:{},children:[{type:a,value:"只取消提交(soft)"}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 回退到之前一次提交"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" reset master^\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 回退到之前5次提交"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" reset master~5\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 回到之前某次提交"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" reset --hard HEAD~\ngti reset --hard 99daed2\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 在reset之前的提交可以参照ORIG_HEAD。Reset错误的时候，在ORIG_HEAD上reset 就可以还原到reset前的状态。"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" reset --hard ORIG_HEAD\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# 会产生一次新的commit提交"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" revert --hard HEAD~\n"}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:br},children:[{type:b,tag:j,props:{href:"#git-stash",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bs}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug, 先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" statsh\n"},{type:b,tag:c,props:{className:[d,bR]},children:[{type:a,value:"do"}]},{type:a,value:" some work\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" statsh pop\n\n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" stash          "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# save uncommitted changes"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# pull, edit, etc."}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" stash list     "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# list stashed changes in this git"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" show stash@"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"{"}]},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:aq}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:"}"}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# see the last stash "}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" stash pop      "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# apply last stash and remove it from the list"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" stash --help   "},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# for more info"}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:u,props:{id:bu},children:[{type:b,tag:j,props:{href:"#gitignore",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bv}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"记录为.gitignore的文件是Git的非管理对象，但是需要提交.gitignore本身。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"可以到 "},{type:b,tag:j,props:{href:"www.gitignore.com"},children:[{type:a,value:"Gitignore网站"}]},{type:a,value:"上找忽略模板。"}]},{type:a,value:e},{type:b,tag:u,props:{id:bx},children:[{type:b,tag:j,props:{href:"#fock--pull-request",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:by}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"我们经常fock其他上游仓库，来pull request做贡献等，首先是保证本地仓库跟上游仓库的同步。关于pr相关操作，可以看相关链接的工作流，这里不多做介绍。"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 添加上游仓库"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bU},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:" upstream https:\u002F\u002Fgithub.com\u002Fjianchengwang\u002Fgit-tutorial.git\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 查看远程仓库列表"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" remote -v\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 拉取上游仓库dev分支，如果没有分支名，默认拉取master分支的代码"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" fetch upstrem dev\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 合并分支"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" checkout \n"},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" rebase upstream\u002Fdev\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 提交到我们自己的远程仓库"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bY}]}]}]},{type:a,value:e},{type:b,tag:Y,props:{id:bz},children:[{type:b,tag:j,props:{href:"#ssh-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bA}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"我们会发现每次进行git push的时候都要输入密码，这样比较麻烦，所以我们可以通过"},{type:b,tag:j,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FSecure_Shell",rel:[B,C,D],target:E},children:[{type:a,value:"ssh"}]},{type:a,value:"进行免密登录。"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"这里只列出了linux的简单命令，其他系统或是更详细的帮助信息请自行查看github的 "},{type:b,tag:j,props:{href:"https:\u002F\u002Fhelp.github.com\u002Fen\u002Farticles\u002Fgenerating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",rel:[B,C,D],target:E},children:[{type:a,value:"相关帮助文档"}]}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 创建 ssh key"}]},{type:a,value:"\nssh-keygen -t rsa -b "},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"4096"}]},{type:a,value:" -C "},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"jianchengwang@yahoo.com\""}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## 添加 ssh key -\u003E ssh-agent"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,T,U]},children:[{type:a,value:"eval"}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:cc},{type:b,tag:c,props:{className:[d,au]},children:[{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:"$("}]},{type:a,value:"ssh-agent -s"},{type:b,tag:c,props:{className:[d,au]},children:[{type:a,value:I}]}]},{type:a,value:cc}]},{type:a,value:"\nssh-add ~\u002F.ssh\u002Fid_rsa\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"## add ssh public key to your github account"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"cat"}]},{type:a,value:" ~\u002F.ssh\u002Fid_rsa.pub\n"}]}]}]},{type:a,value:e},{type:b,tag:Y,props:{id:ae},children:[{type:b,tag:j,props:{href:"#hub",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:bB}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:cd,rel:[B,C,D],target:E},children:[{type:a,value:ae}]},{type:a,value:" is "},{type:b,tag:Z,props:{},children:[{type:a,value:"an extension to command-line git"}]},{type:a,value:" that helps you do everyday GitHub tasks without ever leaving the terminal"}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:a,value:"我一般比较常用"},{type:b,tag:k,props:{},children:[{type:a,value:"hub create"}]},{type:a,value:"命令，你也可以设置别名 "},{type:b,tag:k,props:{},children:[{type:a,value:"git -\u003E hub"}]}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:k,props:{},children:[{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# indicate that you prefer HTTPS to SSH git clone URLs"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" config --global hub.protocol https\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# create a repo to host a new project on GitHub"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:bP},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:P}]},{type:a,value:A},{type:b,tag:c,props:{className:[d,T,U]},children:[{type:a,value:"."}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,G]},children:[{type:a,value:"\"And so, it begins.\""}]},{type:a,value:"\nhub create\n→ "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"creates a new GitHub repository with the name of the current directory"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" push -u origin HEAD\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# clone your own project"}]},{type:a,value:"\nhub clone dotfiles\n→ "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" clone git:\u002F\u002Fgithub.com\u002FYOUR_USER\u002Fdotfiles.git\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# clone another project"}]},{type:a,value:"\nhub clone github\u002Fhub\n→ "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:g}]},{type:a,value:" clone git:\u002F\u002Fgithub.com\u002Fgithub\u002Fhub.git\n\n"},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# fast-forward all local branches to match the latest state on the remote"}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,T,U]},children:[{type:a,value:an}]},{type:a,value:" myproject\nhub "},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:"sync"}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,i]},children:[{type:a,value:"# share log output via Gist"}]},{type:a,value:"\nhub gist create --copy build.log\n→ "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:K}]},{type:a,value:"the URL of the new private gist copied to clipboard"},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:I}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:Y,props:{id:af},children:[{type:b,tag:j,props:{href:"#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5",ariaHidden:o,tabIndex:p},children:[{type:b,tag:c,props:{className:[q,r]},children:[]}]},{type:a,value:af}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"https:\u002F\u002Fgit-scm.com\u002Fdocs\u002F",rel:[B,C,D],target:E},children:[{type:a,value:"官方文档"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=lUQl6gZ5Yy0",rel:[B,C,D],target:E},children:[{type:a,value:"互联网人都该懂点git"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"https:\u002F\u002Fbacklog.com\u002Fgit-tutorial\u002Fcn\u002F",rel:[B,C,D],target:E},children:[{type:a,value:"猴子都能懂的git入门"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"https:\u002F\u002Fwww.liaoxuefeng.com\u002Fwiki\u002F0013739516305929606dd18361248578c67b8067c8c017b000",rel:[B,C,D],target:E},children:[{type:a,value:"廖雪峰git教程"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"https:\u002F\u002Fgit.io\u002FfpYgR",rel:[B,C,D],target:E},children:[{type:a,value:"git工作流"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"http:\u002F\u002Fgitbook.liuhui998.com\u002F",rel:[B,C,D],target:E},children:[{type:a,value:"Git Community Book 中文版"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"http:\u002F\u002Frogerdudler.github.io\u002Fgit-guide\u002Findex.zh.html",rel:[B,C,D],target:E},children:[{type:a,value:"git指南"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:"https:\u002F\u002Fwww.vogella.com\u002Ftutorials\u002FGit\u002Farticle.html",rel:[B,C,D],target:E},children:[{type:a,value:"Git Tutorial"}]}]},{type:a,value:e},{type:b,tag:h,props:{},children:[{type:b,tag:j,props:{href:cd,rel:[B,C,D],target:E},children:[{type:a,value:ae}]}]}]},excerpt:{type:bC,children:[{type:b,tag:h,props:{},children:[{type:a,value:N},{type:b,tag:m,props:{},children:[{type:a,value:bD}]},{type:a,value:bE},{type:b,tag:j,props:{href:bF,rel:[B,C,D],target:E},children:[{type:a,value:bG}]},{type:a,value:bH}]}]},dir:"\u002Ftech",path:"\u002Ftech\u002Fgit",extension:".md",updatedAt:"2020-12-03T15:41:42.126Z"},prev:{slug:ce,title:ce,path:"\u002Ftech\u002Fpandas"},next:{slug:cf,title:cf,path:"\u002Ftech\u002Flive2d-web"},postId:g,tags:void 0}],fetch:[],mutations:[]}}("text","element","span","token","\n","function","git","p","comment","a","code","punctuation","strong","operator","true",-1,"icon","icon-link",4,2,"h4","div","nuxt-content-highlight","pre","line-numbers","language-shell"," ","nofollow","noopener","noreferrer","_blank","td","string","=",")","li","(","\u003E","\u003C","[","\n\n","add","number",3,1,"builtin","class-name","start-commit-id","end-commit-id","修改","h3","em","]","基本介绍","特点","工作流程","技术说明","基本命令","hub","相关链接","img","##","tr","th","git mv","git clone","git cherry-pick","cd","use "," commit -m ","0","git cherry-pick ","到","不修改","variable","soft",{},{},{},{},"git-config","git config",{},"git-init","git init",{},"git-status","git status",{},"git-add","git add",{},"git-mv",{},"git-commit","git commit",{},"git-remote","git remote",{},"git-push","git push",{},"git-clone",{},"git-fetch--pull","git fetch | pull",{},"git-branch","git branch",{},"git-tag","git tag",{},"git-log","git log",{},"git-merge--rebase","git merge | rebase",{},"git-cherry-pick",{},"git-reset--revert","git reset | revert",{},"git-stash","git stash",{},"gitignore",".gitignore",{},"fock--pull-request","fock | pull request","ssh-免密登录","SSH 免密登录","Hub","root","Git","][https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FGit] 是一个分布式的管理系统，作者 ","https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FLinus_Torvalds","Linus Torvalds","  2005 创建它，主要是维护linux内核，现在很多人用它作为大型项目的版本控制软件，来管理源代码，或是一些纯文本的笔记或者文档。本篇文字，很多的文本描述，或者图片资源来自互联网，我只是互联网的搬运工，本文仅作为个人学习的一个记录跟总结。我将在最下方列出部分链接，感兴趣的朋友可以去看看。","staged","user","alias","http","https"," config --global https.proxy socks5:\u002F\u002F127.0.0.1:1080\n"," git-tutorial\n"," init\n"," status\n","keyword","mv"," README.md\n"," remote ","本地分支名",":","远程分支名"," push\n","https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F1057564\u002Fpretty-git-branch-graphs","rebase","ul","commit","","\"","https:\u002F\u002Fhub.github.com\u002F","pandas","live2d-web")));